// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yarn_Feed.Data;

namespace Yarn_Feed.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f9882d2a-1cce-4bc4-94fd-0a090a71ef98",
                            ConcurrencyStamp = "9ad25386-27eb-488e-884e-a92e2c4b3df1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b1211c9e-b025-4e4a-a1e7-07a0d9d01ee1",
                            ConcurrencyStamp = "26d3c870-7750-44ba-ae60-ea29a4fb8ccf",
                            Name = "Crafter",
                            NormalizedName = "CRAFTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CommentedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFirstComment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrafterId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Country", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Crafter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoSmallURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoTinyURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RavelryId")
                        .HasColumnType("int");

                    b.Property<string>("RavelryPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RavelryUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShowLastLoggin")
                        .HasColumnType("bit");

                    b.Property<int?>("TokenUpdated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Crafter");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Fiber_Type", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("animal_fiber")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("synthetic")
                        .HasColumnType("bit");

                    b.Property<bool?>("vegetable_fiber")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Fiber_Type");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LikedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CrafterId");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Needle_Sizes", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Projectid")
                        .HasColumnType("int");

                    b.Property<bool?>("crochet")
                        .HasColumnType("bit");

                    b.Property<string>("hook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("knitting")
                        .HasColumnType("bit");

                    b.Property<float?>("metric")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pretty_metric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("us")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("Needle_Sizes");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pack", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Patternid")
                        .HasColumnType("int");

                    b.Property<int?>("Projectid")
                        .HasColumnType("int");

                    b.Property<int?>("Stashid")
                        .HasColumnType("int");

                    b.Property<int?>("color_family_id")
                        .HasColumnType("int");

                    b.Property<string>("colorway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dye_lot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("grams_per_skein")
                        .HasColumnType("int");

                    b.Property<float?>("meters_per_skein")
                        .HasColumnType("real");

                    b.Property<float?>("ounces_per_skein")
                        .HasColumnType("real");

                    b.Property<string>("personal_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("prefer_metric_length")
                        .HasColumnType("bit");

                    b.Property<bool?>("prefer_metric_weight")
                        .HasColumnType("bit");

                    b.Property<int?>("primary_pack_id")
                        .HasColumnType("int");

                    b.Property<int?>("project_id")
                        .HasColumnType("int");

                    b.Property<string>("quantity_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("shop_id")
                        .HasColumnType("int");

                    b.Property<string>("shop_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("skeins")
                        .HasColumnType("real");

                    b.Property<int?>("stash_id")
                        .HasColumnType("int");

                    b.Property<float?>("thread_size")
                        .HasColumnType("real");

                    b.Property<int?>("total_grams")
                        .HasColumnType("int");

                    b.Property<float?>("total_meters")
                        .HasColumnType("real");

                    b.Property<float?>("total_ounces")
                        .HasColumnType("real");

                    b.Property<float?>("total_yards")
                        .HasColumnType("real");

                    b.Property<float?>("yards_per_skein")
                        .HasColumnType("real");

                    b.Property<int?>("yarn_id")
                        .HasColumnType("int");

                    b.Property<string>("yarn_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yarnid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Patternid");

                    b.HasIndex("Projectid");

                    b.HasIndex("Stashid");

                    b.HasIndex("yarnid");

                    b.ToTable("Pack");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency_symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("difficulty_average")
                        .HasColumnType("real");

                    b.Property<int?>("difficulty_count")
                        .HasColumnType("int");

                    b.Property<bool?>("downloadable")
                        .HasColumnType("bit");

                    b.Property<int?>("favorites_count")
                        .HasColumnType("int");

                    b.Property<bool?>("free")
                        .HasColumnType("bit");

                    b.Property<float?>("gauge")
                        .HasColumnType("real");

                    b.Property<string>("gauge_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("gauge_divisor")
                        .HasColumnType("int");

                    b.Property<string>("gauge_pattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("generally_available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("pattern_authorid")
                        .HasColumnType("int");

                    b.Property<int?>("pattern_typeid")
                        .HasColumnType("int");

                    b.Property<bool?>("pdf_in_library")
                        .HasColumnType("bit");

                    b.Property<string>("pdf_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("price")
                        .HasColumnType("real");

                    b.Property<int?>("product_id")
                        .HasColumnType("int");

                    b.Property<int?>("projects_count")
                        .HasColumnType("int");

                    b.Property<string>("published")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("queued_projects_count")
                        .HasColumnType("int");

                    b.Property<float?>("rating_average")
                        .HasColumnType("real");

                    b.Property<int?>("rating_count")
                        .HasColumnType("int");

                    b.Property<bool?>("ravelry_download")
                        .HasColumnType("bit");

                    b.Property<float?>("row_gauge")
                        .HasColumnType("real");

                    b.Property<string>("sizes_available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yardage")
                        .HasColumnType("int");

                    b.Property<string>("yardage_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yardage_max")
                        .HasColumnType("int");

                    b.Property<string>("yarn_weight_description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("pattern_authorid");

                    b.HasIndex("pattern_typeid");

                    b.ToTable("Pattern");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern_Author", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("crochet_pattern_count")
                        .HasColumnType("int");

                    b.Property<int?>("favorites_count")
                        .HasColumnType("int");

                    b.Property<int?>("knitting_pattern_count")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("patterns_count")
                        .HasColumnType("int");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Pattern_Author");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern_Needle_Sizes", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Patternid")
                        .HasColumnType("int");

                    b.Property<bool?>("crochet")
                        .HasColumnType("bit");

                    b.Property<string>("hook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("knitting")
                        .HasColumnType("bit");

                    b.Property<float?>("metric")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pretty_metric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("us")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Patternid");

                    b.ToTable("Pattern_Needle_Sizes");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern_Type", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("clothing")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Pattern_Type");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Photo", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Patternid")
                        .HasColumnType("int");

                    b.Property<int?>("Projectid")
                        .HasColumnType("int");

                    b.Property<int?>("Stashid")
                        .HasColumnType("int");

                    b.Property<int?>("Yarnid")
                        .HasColumnType("int");

                    b.Property<string>("medium2_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medium_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shelved_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("small2_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("small_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("square_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumbnail_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("x_offset")
                        .HasColumnType("int");

                    b.Property<int?>("y_offset")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Patternid");

                    b.HasIndex("Projectid");

                    b.HasIndex("Stashid");

                    b.HasIndex("Yarnid");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<int?>("PatternId")
                        .HasColumnType("int");

                    b.Property<string>("PostContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<int?>("StashId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfPost")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrafterId");

                    b.HasIndex("PatternId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShopId");

                    b.HasIndex("StashId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("patternid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("patternid");

                    b.ToTable("PostPatterns");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("projectid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("projectid");

                    b.ToTable("PostProjectss");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Shopid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Shopid");

                    b.ToTable("PostShops");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostStash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("stashid")
                        .HasColumnType("int");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("stashid");

                    b.HasIndex("userid");

                    b.ToTable("PostStashs");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Project", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("completed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("craft_id")
                        .HasColumnType("int");

                    b.Property<string>("craft_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("favorites_count")
                        .HasColumnType("int");

                    b.Property<string>("made_for")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("made_for_user_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("pattern_id")
                        .HasColumnType("int");

                    b.Property<string>("pattern_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("photos_count")
                        .HasColumnType("int");

                    b.Property<int?>("progress")
                        .HasColumnType("int");

                    b.Property<string>("project_status_changed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("project_status_id")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("started")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Shop", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("closed")
                        .HasColumnType("bit");

                    b.Property<int?>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("facebook_page")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("free_wifi")
                        .HasColumnType("bit");

                    b.Property<float?>("latitude")
                        .HasColumnType("real");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("pos_online")
                        .HasColumnType("bit");

                    b.Property<bool?>("ravelry_retailer")
                        .HasColumnType("bit");

                    b.Property<bool?>("seating")
                        .HasColumnType("bit");

                    b.Property<string>("shop_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("stateid")
                        .HasColumnType("int");

                    b.Property<string>("twitter_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("countryid");

                    b.HasIndex("stateid");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Stash", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("color_family_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("colorway_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dye_lot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("favorites_count")
                        .HasColumnType("int");

                    b.Property<bool?>("handspun")
                        .HasColumnType("bit");

                    b.Property<bool?>("has_photo")
                        .HasColumnType("bit");

                    b.Property<string>("long_yarn_weight_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("personal_yarn_weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.Property<string>("yarn_weight_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yarnid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.HasIndex("yarnid");

                    b.ToTable("Stash");
                });

            modelBuilder.Entity("Yarn_Feed.Models.State", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Yarn_Feed.Models.User", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about_me")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_me_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fave_colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fave_curse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("large_photo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("small_photo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tiny_photo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Yarn", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("discontinued")
                        .HasColumnType("bit");

                    b.Property<int?>("gauge_divisor")
                        .HasColumnType("int");

                    b.Property<int?>("grams")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes_html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("rating_average")
                        .HasColumnType("real");

                    b.Property<int?>("rating_count")
                        .HasColumnType("int");

                    b.Property<int?>("rating_total")
                        .HasColumnType("int");

                    b.Property<string>("texture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yardage")
                        .HasColumnType("int");

                    b.Property<int?>("yarn_companyid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("yarn_companyid");

                    b.ToTable("Yarn");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Yarn_Company", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yarns_count")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Yarn_Company");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Yarn_Fibers", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Yarnid")
                        .HasColumnType("int");

                    b.Property<int?>("fiber_typeid")
                        .HasColumnType("int");

                    b.Property<int?>("percentage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Yarnid");

                    b.HasIndex("fiber_typeid");

                    b.ToTable("Yarn_Fibers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yarn_Feed.Models.Comment", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Crafter", "Crafter")
                        .WithMany()
                        .HasForeignKey("CrafterId");

                    b.HasOne("Yarn_Feed.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Crafter", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Like", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("Yarn_Feed.Models.Crafter", "Crafter")
                        .WithMany()
                        .HasForeignKey("CrafterId");

                    b.HasOne("Yarn_Feed.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Needle_Sizes", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Project", null)
                        .WithMany("needle_sizes")
                        .HasForeignKey("Projectid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pack", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Pattern", null)
                        .WithMany("packs")
                        .HasForeignKey("Patternid");

                    b.HasOne("Yarn_Feed.Models.Project", null)
                        .WithMany("packs")
                        .HasForeignKey("Projectid");

                    b.HasOne("Yarn_Feed.Models.Stash", null)
                        .WithMany("packs")
                        .HasForeignKey("Stashid");

                    b.HasOne("Yarn_Feed.Models.Yarn", "yarn")
                        .WithMany()
                        .HasForeignKey("yarnid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Pattern_Author", "pattern_author")
                        .WithMany()
                        .HasForeignKey("pattern_authorid");

                    b.HasOne("Yarn_Feed.Models.Pattern_Type", "pattern_type")
                        .WithMany()
                        .HasForeignKey("pattern_typeid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Pattern_Needle_Sizes", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Pattern", null)
                        .WithMany("pattern_needle_sizes")
                        .HasForeignKey("Patternid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Photo", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Pattern", null)
                        .WithMany("photos")
                        .HasForeignKey("Patternid");

                    b.HasOne("Yarn_Feed.Models.Project", null)
                        .WithMany("photos")
                        .HasForeignKey("Projectid");

                    b.HasOne("Yarn_Feed.Models.Stash", null)
                        .WithMany("photos")
                        .HasForeignKey("Stashid");

                    b.HasOne("Yarn_Feed.Models.Yarn", null)
                        .WithMany("photos")
                        .HasForeignKey("Yarnid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Post", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Crafter", "Crafter")
                        .WithMany()
                        .HasForeignKey("CrafterId");

                    b.HasOne("Yarn_Feed.Models.PostPattern", "PostPattern")
                        .WithMany()
                        .HasForeignKey("PatternId");

                    b.HasOne("Yarn_Feed.Models.PostProject", "PostProject")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Yarn_Feed.Models.PostShop", "PostShop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.HasOne("Yarn_Feed.Models.PostStash", "PostStash")
                        .WithMany()
                        .HasForeignKey("StashId");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostPattern", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Pattern", "pattern")
                        .WithMany()
                        .HasForeignKey("patternid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostProject", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Project", "project")
                        .WithMany()
                        .HasForeignKey("projectid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostShop", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("Shopid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.PostStash", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Stash", "stash")
                        .WithMany()
                        .HasForeignKey("stashid");

                    b.HasOne("Yarn_Feed.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Shop", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid");

                    b.HasOne("Yarn_Feed.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("stateid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Stash", b =>
                {
                    b.HasOne("Yarn_Feed.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");

                    b.HasOne("Yarn_Feed.Models.Yarn", "yarn")
                        .WithMany()
                        .HasForeignKey("yarnid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Yarn", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Yarn_Company", "yarn_company")
                        .WithMany()
                        .HasForeignKey("yarn_companyid");
                });

            modelBuilder.Entity("Yarn_Feed.Models.Yarn_Fibers", b =>
                {
                    b.HasOne("Yarn_Feed.Models.Yarn", null)
                        .WithMany("yarn_fibers")
                        .HasForeignKey("Yarnid");

                    b.HasOne("Yarn_Feed.Models.Fiber_Type", "fiber_type")
                        .WithMany()
                        .HasForeignKey("fiber_typeid");
                });
#pragma warning restore 612, 618
        }
    }
}
